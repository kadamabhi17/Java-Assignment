Q1
package reference;

interface First
{
	void disp1();                                  //abstract
	
	default void disp2()                           //concrete
	{
		System.out.println("Default disp2");
	}
	static void disp3()                            //static
	{
		System.out.println("Static disp3");
	}
}

public class methodreference {

	public static void main(String[] args)
	{
		First ref=()->{System.out.println("abstract disp1");};
		ref.disp1();
		System.out.println("implementation of :"+ref.getClass().getName());

		ref.disp2();
		First.disp3();
	}

}

Q2
package reference;

interface Second
{
	void disp4();                                  //abstract
}

public class Demo {

	public static void main(String[] args)
	{
		Second ref=()->{System.out.println("1st implementation of second");};
		System.out.println("implementation of second :"+ref.getClass().getName());
		ref.disp4();
		
		Second ref1=()->{System.out.println("2nd implementation of second");};
		System.out.println("implementation of second :"+ref.getClass().getName());
		ref1.disp4();
	}

}

Q3
package reference;

interface MyInterface
{
	void fun();                                  //abstract
}

public class Demo 
{
	static void perform()
	{
		System.out.println("in static");
	}

	public static void main(String[] args)
	{
		MyInterface ref=()->{Demo.perform();};
		ref.fun();
	}

}

Q4
package reference;

interface Calculator
{
	int multiply(int a,int b);                                 //abstract
}

public class CalcDemo 
{

	public static void main(String[] args)
	{
		Calculator cal=(a,b)->{return a*b;};
		System.out.println(cal.multiply(20, 40));
	}

}

Q5
package reference;

class Display
{
	synchronized void disp()
	{
		System.out.println(Thread.currentThread());
		for(int i=1;i<=10;i++)
		{
			System.out.println(i);
		}
	}
}
public class Demo
{
	public static void main(String args[])
	{
	Display d=new Display();
	Runnable ref=()->{d.disp();};
	
	Thread t1=new Thread(ref);
	
	Thread t2=new Thread(ref);
	System.out.println("Implementation Runnable is\t"+ref.getClass().getName());
	t2.start();
	t1.start();
	}	
}
