QUE 1 

     Create a multi-level inheritance , instantiate the child class and observe constructor invocation.
     Also show, if needed how will u invoke parent class constructor from child class ?


class Base
{
    Base()
    {
        System.out.println("inside base no args");
    }
    Base(int k,int l)
    {
        System.out.println("inside base two param constructor);
    }

}
class Sub extends Base
{
    Sub()
    {
        super(10,20);
        System.out.println("inside sub no args");
    }
    Sub(int k)
    {
        System.out.println("inside sub one param constructor);
    }
}
class Sub1 extends Sub
{
    Sub1()
    {
        super(8);
        System.out.println("inside sub1 no args");
    }
}
public class Demo
{
    public static void main(String[] args)
    {
        Sub1 s1 = new Sub1();
    }
}


QUE 2 

     create a class "Vehicle", define a method "public void start()" in it.
     From this class derive a class FourWheeler.
     How will u override "start()" method of parent class ?


class Vehicle
{
    public void Start()
    {
        System.out.println("inside Vehicle Start()");
    }
}
class Fourwheeler extends Vehicle
{
    public void Start()
    {
        System.out.println("inside Fourwheeler Start()");
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Vehicle v= new Fourwheeler();
        v.Start(); 
    }
}


QUE 3

     Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.


class Base
{
    Base()
    {
        System.out.println("inside Base no args constructor");
    }

    Base(int k, int l)
    {
        System.out.println("inside Base two param constructor");

    }
}
class Sub extends Base
{

    Sub()
    {
        super(10,20);
        System.out.println("inside Sub no args constructor");
    }
    Sub(int k)
    {
        super(30,40);
        System.out.println("inside Sub one param constructor");
    }
}

class Sub1 extends Base
{
    Sub1()
    {
        System.out.println("inside Sub1 no args constructor");
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Sub1 s1 = new Sub1();
        Sub s = new Sub();
    }
}


QUE 4

     Create a class "Top1" with "disp1()" method.
     From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes, override the "disp1()". 
     Now show how will u achieve dynamic polymorphism.


class Top1
{
    void disp1()
    {
        System.out.println("inside Top1 disp");
    }
}
class Bottom1 extends Top1
{
    protected void disp1()
    {
        System.out.println("inside Bottom1 disp");
    }
}
class Bottom2 extends Top1
{
    protected void disp1()
    {
        System.out.println("inside Bottom2 disp");
    }
}
class Bottom3 extends Top1
{
    public void disp1()
    {
        System.out.println("inside Bottom3 disp");
    }
}
public class Main
{

    public static void main(String[] main)
    {
        Top1 tp = new Bottom3();
        tp.disp1(); // Bottom3 disp called
        Top1 tp1 = new Bottom2();
        tp1.disp1(); // Bottom2 disp called
        Top1 tp2 = new Bottom1();
        tp2.disp1(); // Bottom1 disp called

    }
}


QUE 5 

     Create abstract class Shape. declare "draw()" function as abstract.
     From this class define "Triangle","Polygon" and "Circle".
     Create an array of Shape having 3 elements.
     Store child objects into this array and call their draw function.

abstract class Shape
{
    abstract void draw();
}
class Triangle extends Shape
{
    void draw()
    {
        System.out.println("inside Triangle draw() ");
    }
}
class Polygon extends Shape
{
    void draw()
    {
        System.out.println("inside Polygon draw() ");
    }
}
class Circle extends Shape
{
    void draw()
    {
        System.out.println("inside Circle draw() ");
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Shape arr[] = new Shape[3];
        arr[0] = new Triangle();
        arr[1] = new Circle();
        arr[2] = new Polygon();
        for(int i = 0; i<Sarr.length; i++)
        {
            arr[i].draw();
        }
    }
}



QUE 6

     Define interface "A" with "disp1()" method.
     Derive from "A", interface "B" with "disp2" method.
     Derive class "C" , from "B".
     Instantiate class "C" and call its members as well as derived from parent interfaces.


interface A
{
    void disp1(); // public and abstract
}
interface B extends A
{
    void disp2(); // public and abstract
}
class C implements B // public and abstract
{
        public void disp1()
        {
            System.out.println("inside disp1() defined in class C");
        }
        public void disp2()
        {
            System.out.println("inside disp2() defined in class C");
        }
}
public class Main
{
    public static void main(String[] args)
    {
        C c1 = new C();
        c1.disp1();
        c1.disp2();
    }

}


QUE 7 

     Define class "Parent1" with some data.
     Define interface "Parent2" with some methods.
     Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.


class Parent1
{
    int num1;
    int num2;
    Parent1(int k, int l)
    {
        this.num1 = k;
        this.num2 = l;
        System.out.println("inside Parent1() param constructor");
    }
    void disp1()
    {
        System.out.println("num1 = "+num1+"\t"+"num2 = "+num2);
    }
}
interface Parent2
{
    void disp2();
    int returning();
}
class Child extends Parent1 implements Parent2
{
    Child()
    {
        super(10,20);
        System.out.println("inside child class constructor");
    }

    public void disp2()
    {
        System.out.println("inside child class disp2");
        disp1();
    }
    public int returning()
    {
        int num = 0;

        return num;
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Child c1 = new Child();
        c1.disp1();
        c1.disp2();
        int res = c1.returning();
        System.out.println("res = "+res);
    }
}



QUE 8 

     Define a class "base1" with only parameterized constructor.
     Derive a class "sub1" from "base1". This class should have following constructors
        a) Default
        b) one parameter
        c) two parameter
     Now try to instantiate "sub1", using any of the above mentioned constructors.

class base1
{
    int num1;
    int num2;
    int num3;
    base1(int num1, int num2, int num3)
    {
        System.out.println("inside base1(int,int,int)");
        this.num1 = num1;
        this.num2 = num2;
        this.num3 = num3;
    }
    void disp1()
    {
        System.out.println("num1 = "+num1+"\t"+"num2 = "+ num2+"\t"+"num3 = "+num3);
    }
}
class sub1 extends base1
{
    int num4;
    int num5;
    sub1()
    {
        super(10,20,30);
        System.out.println("inside sub1()");
        this.num4 = 30;
        this.num5 = 35;
    }
    sub1(int num4)
    {
        super(15,20,25);
        this.num5 = 100;
    }
    sub1(int num4, int num5)
    {
        super(40,50,60);
        System.out.println("inside sub1(int,int)");
        this.num4 = num4;
        this.num5 = num5;
    }
    void disp2()
    {
        System.out.println("num5 = "+num4+"\t"+"num5 = "+ num5);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        sub1 s1 = new sub1();
        s1.disp1();
        s1.disp2();
    }
}



QUE 9 

     Create interface "Game" , have an abstract method "play()". 
     From this interface implement classes like "Cricket", "FootBall" and "Tennis".
     Now Define one more class public class Demo with main function.
     In this class have a static method "perform" which will take interface reference as parameter.
     Inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.



interface Game
{
    void play();
}
class Cricket implements Game
{
    public void play()
    {
        System.out.println("inside cricket play() ");
    }
}
class FootBall implements Game 
{
    public void play()
    {
        System.out.println("inside Football play() ");
    }
}
class Tennis implements Game
{
    public void play()
    {
        System.out.println("inside Tennis play() ");
    }
}
public class Main
{
    static void perform(Game ref)
    {

    }
    public static void main(String[] args)
    {
        Game g1 = new cricket();
        g1.play();
        Game g2 = new Tennis();
        g2.play();
        Game g3 = new FootBall();
        g3.play();
    }
}

